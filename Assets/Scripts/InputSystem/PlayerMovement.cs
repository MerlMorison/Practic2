//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/Scripts/InputSystem/PlayerMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

namespace PlayerMove
{
    public partial class @PlayerMovement: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerMovement()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovement"",
    ""maps"": [
        {
            ""name"": ""PlayerWASD"",
            ""id"": ""a48fd6a5-8b15-411b-b04d-4363e37ea80e"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""6221cdb3-ab99-4157-8e6e-af6e34677d0e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""14d2784f-4637-4b69-a6e6-853f4880ac58"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Buff"",
                    ""type"": ""Button"",
                    ""id"": ""c4c4a635-e332-42f3-9fdd-a958614e3cec"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""Button"",
                    ""id"": ""43b0f204-7c0d-40eb-b5e3-b341e8cf898e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""61219cad-e22d-41c1-aae3-e8d79a98213b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ac595122-d7e2-4b0e-a97b-fdb7d6b591ea"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b2fbb2a2-a6fa-4f4b-8c7d-ee40424f7fb3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ef4925f0-b5b7-4651-ae2b-ffe668bc1c3d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ef51a06b-7f1a-4fbd-bae6-31a5e7b8c34d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c632dc50-1236-40d1-99d2-163a8502bfff"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Buff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa4c92ee-d96a-4149-a09b-382a59b019cf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerWASD
            m_PlayerWASD = asset.FindActionMap("PlayerWASD", throwIfNotFound: true);
            m_PlayerWASD_WASD = m_PlayerWASD.FindAction("WASD", throwIfNotFound: true);
            m_PlayerWASD_Jump = m_PlayerWASD.FindAction("Jump", throwIfNotFound: true);
            m_PlayerWASD_Buff = m_PlayerWASD.FindAction("Buff", throwIfNotFound: true);
            m_PlayerWASD_Slide = m_PlayerWASD.FindAction("Slide", throwIfNotFound: true);
        }

        ~@PlayerMovement()
        {
            Debug.Assert(!m_PlayerWASD.enabled, "This will cause a leak and performance issues, PlayerMovement.PlayerWASD.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerWASD
        private readonly InputActionMap m_PlayerWASD;
        private List<IPlayerWASDActions> m_PlayerWASDActionsCallbackInterfaces = new List<IPlayerWASDActions>();
        private readonly InputAction m_PlayerWASD_WASD;
        private readonly InputAction m_PlayerWASD_Jump;
        private readonly InputAction m_PlayerWASD_Buff;
        private readonly InputAction m_PlayerWASD_Slide;
        public struct PlayerWASDActions
        {
            private @PlayerMovement m_Wrapper;
            public PlayerWASDActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
            public InputAction @WASD => m_Wrapper.m_PlayerWASD_WASD;
            public InputAction @Jump => m_Wrapper.m_PlayerWASD_Jump;
            public InputAction @Buff => m_Wrapper.m_PlayerWASD_Buff;
            public InputAction @Slide => m_Wrapper.m_PlayerWASD_Slide;
            public InputActionMap Get() { return m_Wrapper.m_PlayerWASD; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerWASDActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerWASDActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerWASDActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerWASDActionsCallbackInterfaces.Add(instance);
                @WASD.started += instance.OnWASD;
                @WASD.performed += instance.OnWASD;
                @WASD.canceled += instance.OnWASD;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Buff.started += instance.OnBuff;
                @Buff.performed += instance.OnBuff;
                @Buff.canceled += instance.OnBuff;
                @Slide.started += instance.OnSlide;
                @Slide.performed += instance.OnSlide;
                @Slide.canceled += instance.OnSlide;
            }

            private void UnregisterCallbacks(IPlayerWASDActions instance)
            {
                @WASD.started -= instance.OnWASD;
                @WASD.performed -= instance.OnWASD;
                @WASD.canceled -= instance.OnWASD;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Buff.started -= instance.OnBuff;
                @Buff.performed -= instance.OnBuff;
                @Buff.canceled -= instance.OnBuff;
                @Slide.started -= instance.OnSlide;
                @Slide.performed -= instance.OnSlide;
                @Slide.canceled -= instance.OnSlide;
            }

            public void RemoveCallbacks(IPlayerWASDActions instance)
            {
                if (m_Wrapper.m_PlayerWASDActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerWASDActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerWASDActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerWASDActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerWASDActions @PlayerWASD => new PlayerWASDActions(this);
        public interface IPlayerWASDActions
        {
            void OnWASD(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnBuff(InputAction.CallbackContext context);
            void OnSlide(InputAction.CallbackContext context);
        }
    }
}
